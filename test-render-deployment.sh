#!/bin/bash

# Script de test pour le d√©ploiement Render
# Usage: ./test-render-deployment.sh [RENDER_URL]

set -e

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions de logging
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}\n=== $1 ===${NC}"
}

# Configuration par d√©faut
RENDER_URL="https://likafood-backend.onrender.com"

# URL Render (param√®tre ou demande √† l'utilisateur)
if [ -n "$1" ]; then
    RENDER_URL="$1"
else
    if [ -z "$RENDER_URL" ]; then
        read -p "Entrez l'URL de votre d√©ploiement Render (ex: https://your-app.onrender.com): " RENDER_URL
    fi
fi

if [ -z "$RENDER_URL" ]; then
    print_error "URL Render requise"
    exit 1
fi

# Nettoyer l'URL (supprimer le slash final)
RENDER_URL=${RENDER_URL%/}

print_info "üß™ Test du d√©ploiement Render : $RENDER_URL"

# Test 1: Health Check
print_header "Test de Sant√© (Health Check)"
if curl -f -s "$RENDER_URL/api/health" > /dev/null; then
    print_success "Health check r√©ussi"
    
    HEALTH_RESPONSE=$(curl -s "$RENDER_URL/api/health")
    echo "R√©ponse: $HEALTH_RESPONSE"
else
    print_error "Health check √©chou√©"
    echo "V√©rifiez que votre backend est d√©ploy√© et accessible"
fi

# Test 2: Authentification
print_header "Test d'Authentification"
AUTH_RESPONSE=$(curl -s -w "%{http_code}" -X POST "$RENDER_URL/api/auth/login-or-register" \
    -H "Content-Type: application/json" \
    -d '{"phoneNumber":"+33123456789"}' \
    -o /tmp/auth_response.json)

if [ "$AUTH_RESPONSE" = "200" ] || [ "$AUTH_RESPONSE" = "201" ]; then
    print_success "Endpoint d'authentification accessible (HTTP $AUTH_RESPONSE)"
    echo "R√©ponse: $(cat /tmp/auth_response.json)"
elif [ "$AUTH_RESPONSE" = "400" ]; then
    print_warning "Endpoint d'authentification accessible mais erreur de validation (HTTP $AUTH_RESPONSE)"
    echo "Ceci est normal si Twilio n'est pas configur√©"
    echo "R√©ponse: $(cat /tmp/auth_response.json)"
else
    print_error "Endpoint d'authentification inaccessible (HTTP $AUTH_RESPONSE)"
    echo "R√©ponse: $(cat /tmp/auth_response.json)"
fi

# Test 3: CORS Headers
print_header "Test des Headers CORS"
CORS_HEADERS=$(curl -s -I "$RENDER_URL/api/health" | grep -i "access-control")
if [ -n "$CORS_HEADERS" ]; then
    print_success "Headers CORS configur√©s"
    echo "$CORS_HEADERS"
else
    print_warning "Headers CORS non d√©tect√©s"
    echo "V√©rifiez la configuration CORS dans votre backend"
fi

# Test 4: Performance
print_header "Test de Performance"
RESPONSE_TIME=$(curl -s -w "%{time_total}" -o /dev/null "$RENDER_URL/api/health")
if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
    print_success "Temps de r√©ponse acceptable: ${RESPONSE_TIME}s"
elif (( $(echo "$RESPONSE_TIME < 5.0" | bc -l) )); then
    print_warning "Temps de r√©ponse lent: ${RESPONSE_TIME}s"
else
    print_error "Temps de r√©ponse tr√®s lent: ${RESPONSE_TIME}s"
fi

# Test 5: HTTPS
print_header "Test HTTPS"
if [[ $RENDER_URL == https://* ]]; then
    SSL_INFO=$(curl -s -I "$RENDER_URL" | head -1)
    print_success "HTTPS activ√©"
    echo "$SSL_INFO"
else
    print_error "HTTPS non activ√©"
    echo "Render active HTTPS automatiquement, v√©rifiez votre URL"
fi

# Test 6: Disponibilit√©
print_header "Test de Disponibilit√©"
print_info "Test de charge l√©g√®re (5 requ√™tes simultan√©es)..."
for i in {1..5}; do
    curl -s "$RENDER_URL/api/health" > /dev/null &
done
wait
print_success "Test de charge termin√©"

# R√©sum√©
print_header "R√©sum√© des Tests"
print_info "URL test√©e: $RENDER_URL"
print_info "Tous les tests sont termin√©s"
echo ""
echo "üìã Actions recommand√©es:"
echo "1. V√©rifiez les logs Render si des tests ont √©chou√©"
echo "2. Configurez les variables d'environnement si n√©cessaire"
echo "3. Testez l'int√©gration avec votre frontend"
echo "4. Configurez le monitoring et les alertes"
echo "5. Documentez l'URL de production pour votre √©quipe"
echo ""
print_success "üéâ Test de d√©ploiement Render termin√©!"

# Nettoyage
rm -f /tmp/auth_response.json