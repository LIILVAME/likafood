name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install backend dependencies
        run: npm ci
      
      - name: Run backend tests
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/likafood_test
          JWT_SECRET: test-secret-key-for-ci
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci
      
      - name: Run security audit
        run: npm audit --audit-level moderate
      
      - name: Generate test coverage
        run: npm run test:coverage

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install frontend dependencies
        run: npm ci
      
      - name: Run frontend tests
        run: npm test -- --coverage --watchAll=false
      
      - name: Build frontend
        run: npm run build
      
      - name: Run security audit
        run: npm audit --audit-level moderate

  # Security Checks
  security:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging (only on develop branch)
  deploy-staging:
    needs: [backend-test, frontend-test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Render (Staging)
        run: |
          echo "Deploying to staging environment..."
          # Render auto-deploys from GitHub
      
      - name: Deploy to Vercel (Staging)
        run: |
          echo "Deploying frontend to staging..."
          # Add Vercel deployment commands here

  # Deploy to production (only on main branch)
  deploy-production:
    needs: [backend-test, frontend-test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Render (Production)
        run: |
          echo "Deploying to production environment..."
          # Render auto-deploys from GitHub
      
      - name: Deploy to Vercel (Production)
        run: |
          echo "Deploying frontend to production..."
          # Add Vercel deployment commands here
      
      - name: Notify deployment success
        run: |
          echo "Production deployment completed successfully!"